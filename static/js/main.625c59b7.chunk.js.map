{"version":3,"sources":["images/loading.gif","images/esl-logo-latest.png","images/elder-scrolls-bg.jpg","actions/index.js","actions/types.js","components/Card/index.js","components/Results/index.js","components/Search/index.js","App.js","reducers/cardReducer.js","reducers/index.js","index.js"],"names":["module","exports","fetchCards","fetchUrl","dispatch","type","axios","get","then","data","payload","setCards","finally","Card","props","name","imageUrl","text","set","rarity","setName","className","src","alt","Results","handleScroll","e","wrappedElement","document","getElementById","isBottom","fetchNextPage","this","window","addEventListener","removeEventListener","next","isLoadingData","el","getBoundingClientRect","bottom","innerHeight","cards","noResults","length","id","map","g","i","key","loadingImage","Component","connect","state","cardReducer","Search","nameQuery","target","value","replace","seachUpdate","for","onChange","handleSearchChange","bind","apiUrl","App","bgImage","logo","action","updatedState","_links","push","allReducers","combineReducers","store","createStore","compose","applyMiddleware","thunk","devToolsExtension","f","ReactDOM","render"],"mappings":"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","file":"static/js/main.625c59b7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.750fc7f7.gif\";","module.exports = __webpack_public_path__ + \"static/media/esl-logo-latest.b9d0a541.png\";","module.exports = __webpack_public_path__ + \"static/media/elder-scrolls-bg.21f88751.jpg\";","import axios from \"axios\";\r\nimport { SET_CARDS, CLEAR_CARDS, API_START, API_END } from \"./types\";\r\n\r\nexport function fetchCards(fetchUrl) {\r\n  return function(dispatch) {\r\n    // start loading gif\r\n    dispatch(apiStart());\r\n    // axios get request to the end point, Step 2 in api flow\r\n    return axios.get(fetchUrl).then(({ data }) => {\r\n      // dispatch a SET_CARDS action Step 3 in api flow\r\n      dispatch(setCards(data));\r\n    }).finally(() => {\r\n      // end loading gif\r\n      dispatch(apiEnd());\r\n    });\r\n  };\r\n}\r\n\r\nexport function setCards(data) {\r\n  return {\r\n    type: SET_CARDS,\r\n    payload: data\r\n  };\r\n}\r\n\r\nexport function seachUpdate(nameQuery) {\r\n  return function(dispatch) {\r\n    const apiUrl = nameQuery.length > 0 ? \"https://api.elderscrollslegends.io/v1/cards?pageSize=20&name=\" + nameQuery : \"https://api.elderscrollslegends.io/v1/cards?pageSize=20\";\r\n    dispatch(clearCards());\r\n    return dispatch(fetchCards(apiUrl));\r\n  }\r\n}\r\n\r\nfunction clearCards() {\r\n  return {\r\n    type: CLEAR_CARDS\r\n  };\r\n}\r\n\r\nfunction apiStart() {\r\n  return {\r\n    type: API_START\r\n  };\r\n}\r\n\r\nfunction apiEnd() {\r\n  return {\r\n    type: API_END\r\n  };\r\n}\r\n","export const SET_CARDS = \"SET_CARDS\";\r\nexport const CLEAR_CARDS = \"CLEAR_CARDS\";\r\nexport const API_START = \"API_START\";\r\nexport const API_END = \"API_END\";\r\n","import React from 'react';\r\nimport './Card.scss';\r\n\r\nconst Card = ( props ) => {\r\n  const { name, imageUrl, text, type, set, rarity } = props;\r\n    const setName = set.name;\r\n\r\n    return (\r\n      <div className={`card ${rarity}`}>\r\n        <div className=\"card-image\"><img src={imageUrl} alt={name} /></div>\r\n        <div className=\"card-info\">\r\n        <div className=\"card-name\">{name}</div>\r\n          <p>Type: {type}</p>\r\n          <p>Set: {setName}</p>\r\n          <p>{text}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n/*\r\nExample card data\r\n  {\r\n    \"name\":\"Raise Dead\",\r\n    \"rarity\":\"Legendary\",\r\n    \"type\":\"Action\",\r\n    \"cost\":2,\r\n    \"set\":{\r\n      \"id\":\"cs\",\r\n      \"name\":\"Core Set\",\r\n      \"_self\":\"https://api.elderscrollslegends.io/v1/sets/cs\"\r\n    },\r\n    \"collectible\":false,\r\n    \"text\":\"Summon a random creature from each discard pile.\",\r\n    \"attributes\":[\"Endurance\"],\r\n    \"unique\":false,\r\n    \"imageUrl\":\"https://images.elderscrollslegends.io/cs/raise_dead.png\",\r\n    \"id\":\"ce7be2e72d6b06a52e50bed01952801ca4ecfade\"\r\n  }\r\n*/\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchCards } from '../../actions';\r\nimport Card from '../Card';\r\nimport loadingImage from '../../images/loading.gif';\r\nimport './Results.scss';\r\n\r\nclass Results extends Component {\r\n  componentDidMount() {\r\n    // load default list of cards, Step 1 in api flow\r\n    this.props.fetchCards(\"https://api.elderscrollslegends.io/v1/cards?pageSize=20&page=1\");\r\n    window.addEventListener('scroll', this.handleScroll, true);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('scroll', this.handleScroll);\r\n  }\r\n\r\n  fetchNextPage() {\r\n    const { next, isLoadingData } = this.props;\r\n    // if we're not on the last page and we're not already loading a new page\r\n    if( next !== \"LAST_PAGE\" && !isLoadingData ) {\r\n      // fetch the next page of cards\r\n      this.props.fetchCards(next);\r\n    }\r\n  }\r\n\r\n  isBottom(el) {\r\n    // compare bottom of el from top of viewport to height of viewport\r\n    return el.getBoundingClientRect().bottom <= window.innerHeight;\r\n  }\r\n\r\n  handleScroll = (e) => {\r\n    const wrappedElement = document.getElementById('results');\r\n    // if we are at the bottom of results\r\n    if (this.isBottom(wrappedElement)) {\r\n      // attempt to load the next page of cards\r\n      this.fetchNextPage();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // when the cards in the store are updated, this component will redraw,\r\n    // Step 5 in api flow\r\n    const { cards, isLoadingData } = this.props;\r\n    const noResults = (cards.length === 0);\r\n    return (\r\n      <div id=\"results\">\r\n      {(noResults && !isLoadingData) ? (<div className=\"no-results\">No Results</div>) : (cards.map((g, i) => {\r\n        return <Card key={i} {...g} />\r\n      }))}\r\n      {isLoadingData && <div className=\"loading\"><img src={loadingImage} alt=\"loading\" /></div>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { cards, isLoadingData, next } = state.cardReducer;\r\n  return {\r\n    cards,\r\n    isLoadingData,\r\n    next\r\n  };\r\n};\r\n\r\nexport default connect( mapStateToProps, { fetchCards } )(Results);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { seachUpdate } from \"../../actions\";\r\nimport './Search.scss';\r\n\r\nclass Search extends Component {\r\n  // TODO: Add buffer to prevent cards fetch while user is still typing\r\n\r\n  handleSearchChange(e) {\r\n    // remove all characters that are not numbers or letters to avoid errors and prevent injection\r\n    const nameQuery = e.target.value.replace(/[^0-9a-z]/gi, '');\r\n    this.props.seachUpdate(nameQuery);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"search-box\">\r\n        <div className=\"input-container\">\r\n          <label for=\"search-input\">Search </label>\r\n          <input id=\"search-input\" onChange={this.handleSearchChange.bind(this)} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ data = {} }) => ({\r\n  data\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {\r\n    seachUpdate\r\n  }\r\n)(Search);\r\n","import React from 'react';\nimport Results from './components/Results';\nimport Search from './components/Search';\nimport logo from './images/esl-logo-latest.png';\nimport bgImage from './images/elder-scrolls-bg.jpg';\nimport './layout.scss';\n\nconst App = () => {\n  return (\n    <div>\n      <div id=\"bg-container\">\n        <img src={bgImage} alt=\"Elder Scrolls background wallpaper\" />\n      </div>\n      <div id=\"app-content\">\n        <div id=\"logo\"><img src={logo} alt=\"Elder Scrolls Legends Logo\" /></div>\n        <Search />\n        <Results />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import {\r\n  SET_CARDS,\r\n  CLEAR_CARDS,\r\n  API_START,\r\n  API_END\r\n} from \"../actions/types\";\r\n\r\nconst cardReducer = (state = {cards:[]}, action) => {\r\n  switch(action.type){\r\n    case SET_CARDS:\r\n      // apply fetched cards to store, Step 4 in api flow\r\n      const cards = action.payload.cards;\r\n      let updatedState = state;\r\n      // if available grab the next api endpoint, save it\r\n      if(action.payload._links && action.payload._links.next) {\r\n        updatedState.next = action.payload._links.next;\r\n      } else {\r\n        updatedState.next = \"LAST_PAGE\";\r\n      }\r\n      updatedState.cards.push(...cards);\r\n      return updatedState;\r\n    case CLEAR_CARDS:\r\n      return {\r\n        ...state,\r\n        cards: []\r\n      };\r\n    case API_START:\r\n      return {\r\n        ...state,\r\n        isLoadingData: true\r\n      };\r\n    case API_END:\r\n      return {\r\n        ...state,\r\n        isLoadingData: false\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default cardReducer;\r\n\r\n/*\r\nExample response\r\n{\r\n  \"cards\":[\r\n    {\r\n      \"name\":\"Raise Dead\",\r\n      \"rarity\":\"Legendary\",\r\n      \"type\":\"Action\",\r\n      \"cost\":2,\r\n      \"set\":{\r\n        \"id\":\"cs\",\r\n        \"name\":\"Core Set\",\r\n        \"_self\":\"https://api.elderscrollslegends.io/v1/sets/cs\"\r\n      },\r\n      \"collectible\":false,\r\n      \"text\":\"Summon a random creature from each discard pile.\",\r\n      \"attributes\":[\"Endurance\"],\r\n      \"unique\":false,\r\n      \"imageUrl\":\"https://images.elderscrollslegends.io/cs/raise_dead.png\",\r\n      \"id\":\"ce7be2e72d6b06a52e50bed01952801ca4ecfade\"\r\n    },\r\n  ],\r\n  \"_links\":{\r\n    \"next\":\"https://api.elderscrollslegends.io/v1/cards?page=6&pageSize=1\",\r\n    \"prev\":\"https://api.elderscrollslegends.io/v1/cards?page=4&pageSize=1\"\r\n  },\r\n  \"_pageSize\":1,\r\n  \"_totalCount\":1212\r\n}\r\n*/\r\n","import cardReducer from './cardReducer';\r\nimport {combineReducers} from 'redux';\r\n\r\n// setting up an all reducers combiner in case we need to add more in the future\r\nconst allReducers = combineReducers({\r\n  cardReducer\r\n})\r\n\r\nexport default allReducers;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport allReducers from './reducers';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(allReducers,\n  compose(\n    // thunk for async\n    applyMiddleware(thunk),\n    // this extension allows me to check redux stores in browser\n    window.devToolsExtension ? window.devToolsExtension() : f => f\n  )\n);\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}